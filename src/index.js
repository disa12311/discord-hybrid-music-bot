// src/index.js
require('dotenv').config(); // Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
const { Client, GatewayIntentBits, Collection } = require('discord.js');
const fs = require('node:fs');
const path = require('node:path');
const { Player } = require('discord-player');
const setupErrorHandler = require('./utils/errorHandler'); // Import error handler

// --- C·∫•u h√¨nh Client Discord ---
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,           // C·∫ßn ƒë·ªÉ l·∫•y th√¥ng tin guild (server)
        GatewayIntentBits.GuildMessages,    // C·∫ßn ƒë·ªÉ ƒë·ªçc v√† g·ª≠i tin nh·∫Øn
        GatewayIntentBits.MessageContent,   // C·∫ßn ƒë·ªÉ ƒë·ªçc n·ªôi dung tin nh·∫Øn (n·∫øu d√πng prefix commands, hi·ªán t·∫°i t·∫≠p trung slash)
        GatewayIntentBits.GuildVoiceStates, // C·∫ßn ƒë·ªÉ bot k·∫øt n·ªëi v√† qu·∫£n l√Ω voice channel
    ],
});

// G√°n Collection cho commands v√† events ƒë·ªÉ d·ªÖ d√†ng truy c·∫≠p
client.commands = new Collection();
client.events = new Collection();

// --- T·∫£i Commands v√† Events ---
const loadFiles = (dir, collection, type) => {
    const filesPath = path.join(__dirname, dir);
    const fileNames = fs.readdirSync(filesPath).filter(file => file.endsWith('.js'));

    for (const file of fileNames) {
        const filePath = path.join(filesPath, file);
        const module = require(filePath);
        if ('data' in module || 'name' in module) { // Ki·ªÉm tra c√≥ ph·∫£i l·ªánh ho·∫∑c s·ª± ki·ªán h·ª£p l·ªá
            collection.set(module.data?.name || module.name, module);
            console.log(`[LOADER] ƒê√£ t·∫£i ${type}: ${module.data?.name || module.name}`);
        } else {
            console.warn(`[LOADER] ${filePath} thi·∫øu thu·ªôc t√≠nh "data" ho·∫∑c "name" b·∫Øt bu·ªôc.`);
        }
    }
};

loadFiles('commands', client.commands, 'l·ªánh');
loadFiles('events', client.events, 's·ª± ki·ªán');

// --- C·∫•u h√¨nh Discord Player ---
const player = new Player(client, {
    ytdlOptions: {
        filter: 'audioonly', // Ch·ªâ l·∫•y audio
        quality: 'highestaudio',
        // highWaterMark: 1 << 25, // T√πy ch·ªânh buffer n·∫øu c·∫ßn
    },
    // ƒê·∫∑t options cho engine t√¨m ki·∫øm m·∫∑c ƒë·ªãnh
    // V√≠ d·ª•: searchSongs: 5 ƒë·ªÉ t√¨m 5 b√†i h√°t n·∫øu query kh√¥ng ph·∫£i URL
    // Tuy nhi√™n, ch√∫ng ta s·∫Ω override search engine ƒë·ªÉ d√πng Python backend
});

// G√°n player cho client ƒë·ªÉ c√°c l·ªánh c√≥ th·ªÉ truy c·∫≠p
client.player = player;

// --- Ghi ƒë√® Search Engine c·ªßa Discord Player ƒë·ªÉ s·ª≠ d·ª•ng Python Backend ---
// ƒê√¢y l√† c·∫£i ti·∫øn quan tr·ªçng ƒë·ªÉ bot s·ª≠ d·ª•ng backend Python c·ªßa b·∫°n
player.extractors.register(async (query, options) => {
    // Ch·ªâ x·ª≠ l√Ω n·∫øu query kh√¥ng ph·∫£i l√† m·ªôt URL ƒë√£ ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi c√°c extractor kh√°c c·ªßa discord-player
    // ho·∫∑c n·∫øu b·∫°n mu·ªën M·ªåI T√åM KI·∫æM ƒë·ªÅu qua backend Python c·ªßa b·∫°n
    // if (query.startsWith('http://') || query.startsWith('https://')) return; // B·ªè qua n·∫øu l√† URL

    const PYTHON_API_BASE_URL = process.env.PYTHON_API_BASE_URL;
    if (!PYTHON_API_BASE_URL) {
        console.error("Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng PYTHON_API_BASE_URL. Kh√¥ng th·ªÉ g·ªçi backend Python.");
        return null; // Kh√¥ng th·ªÉ t√¨m ki·∫øm
    }

    try {
        // T·∫°o URL API cho music info
        const api_url = `${PYTHON_API_BASE_URL}/api/get_music_info?query=${encodeURIComponent(query)}`;
        console.log(`[Python Backend] ƒêang g·ªçi API: ${api_url}`);

        const response = await fetch(api_url);
        if (!response.ok) {
            console.error(`[Python Backend] L·ªói HTTP: ${response.status} ${response.statusText} khi g·ªçi ${api_url}`);
            const errorText = await response.text();
            console.error(`[Python Backend] Ph·∫£n h·ªìi l·ªói: ${errorText}`);
            return null; // Kh√¥ng t√¨m th·∫•y ho·∫∑c l·ªói t·ª´ backend
        }

        const data = await response.json();

        if (data.error) {
            console.error(`[Python Backend] Backend tr·∫£ v·ªÅ l·ªói: ${data.error}`);
            return null;
        }

        if (!data.stream_url) {
            console.error(`[Python Backend] Kh√¥ng t√¨m th·∫•y stream_url trong ph·∫£n h·ªìi t·ª´ backend cho query: ${query}`);
            return null;
        }

        // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng Track ph√π h·ª£p v·ªõi Discord Player
        // Type c√≥ th·ªÉ l√† 'track', 'playlist', 'album', 'artist'
        return {
            playlist: null, // Kh√¥ng ph·∫£i playlist
            type: 'track',
            url: data.url, // URL c·ªßa trang g·ªëc (YouTube)
            title: data.title,
            description: data.title, // C√≥ th·ªÉ c·∫£i thi·ªán sau
            author: data.uploader || 'Unknown', // Th√™m uploader n·∫øu c√≥
            thumbnail: data.thumbnail,
            duration: data.duration ? player.utils.formatTime(data.duration * 1000) : '0:00', // Format th·ªùi l∆∞·ª£ng
            views: data.view_count || 0,
            requestedBy: null, // S·∫Ω ƒë∆∞·ª£c ƒëi·ªÅn khi add v√†o queue
            source: 'custom_python_backend', // Ngu·ªìn t√πy ch·ªânh c·ªßa b·∫°n
            raw: {
                streamUrl: data.stream_url, // Stream URL tr·ª±c ti·∫øp t·ª´ backend
                url: data.url,
                duration: data.duration
            },
            // streamURL: data.stream_url // Discord-player s·∫Ω t·ª± ƒë·ªông t√¨m t·ª´ raw.streamUrl ho·∫∑c url
        };
    } catch (error) {
        console.error(`[Python Backend] L·ªói khi g·ªçi backend Python ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu:`, error);
        return null; // L·ªói trong qu√° tr√¨nh t√¨m ki·∫øm
    }
}, { name: 'python-backend-search', parallelism: 1, searchable: true }); // ƒêƒÉng k√Ω extractor m·ªõi v·ªõi t√™n duy nh·∫•t

// ƒêƒÉng k√Ω Event Listener cho Discord Player
client.player.events.on('playerStart', (queue, track) => {
    // G·ª≠i th√¥ng b√°o khi b·∫Øt ƒë·∫ßu ph√°t nh·∫°c
    queue.metadata.channel.send(`üé∂ ƒêang ph√°t: **${track.title}** c·ªßa **${track.author}**!`);
});

client.player.events.on('audioTrackAdd', (queue, track) => {
    queue.metadata.channel.send(`üéµ ƒê√£ th√™m **${track.title}** v√†o h√†ng ƒë·ª£i!`);
});

client.player.events.on('disconnect', queue => {
    queue.metadata.channel.send('‚ùå Bot ƒë√£ b·ªã ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh tho·∫°i.');
});

client.player.events.on('emptyChannel', queue => {
    queue.metadata.channel.send('üîä K√™nh tho·∫°i tr·ªëng r·ªóng! ƒêang r·ªùi k√™nh...');
    queue.connection.destroy(); // T·ª± ƒë·ªông r·ªùi k√™nh v√† h·ªßy k·∫øt n·ªëi
});

client.player.events.on('emptyQueue', queue => {
    queue.metadata.channel.send('‚úÖ H√†ng ƒë·ª£i ƒë√£ k·∫øt th√∫c. ƒêang r·ªùi k√™nh...');
    queue.connection.destroy(); // T·ª± ƒë·ªông r·ªùi k√™nh v√† h·ªßy k·∫øt n·ªëi
});

client.player.events.on('error', (queue, error) => {
    console.error(`[Discord Player Error] ${error.message}`);
    // console.error(error); // Log ƒë·∫ßy ƒë·ªß l·ªói n·∫øu c·∫ßn
    if (queue) {
        queue.metadata.channel.send(`üö´ ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c: ${error.message}`);
    } else {
        // G·ª≠i l·ªói chung ƒë·∫øn k√™nh admin n·∫øu kh√¥ng c√≥ queue c·ª• th·ªÉ
        const adminLogChannel = client.channels.cache.get(process.env.ADMIN_LOG_CHANNEL_ID);
        if (adminLogChannel) {
            adminLogChannel.send(`üö´ [Discord Player Error] ƒê√£ x·∫£y ra l·ªói t·ªïng qu√°t: ${error.message}`);
        }
    }
});

// --- Setup Error Handler To√†n C·ª•c ---
setupErrorHandler(client); // Truy·ªÅn client v√†o ƒë·ªÉ error handler c√≥ th·ªÉ g·ª≠i th√¥ng b√°o

// --- ƒêƒÉng nh·∫≠p Bot ---
client.login(process.env.DISCORD_TOKEN);
