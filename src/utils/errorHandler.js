// src/utils/errorHandler.js
const { EmbedBuilder } = require('discord.js');

/**
 * X·ª≠ l√Ω l·ªói t·∫≠p trung.
 * @param {Error} error - ƒê·ªëi t∆∞·ª£ng l·ªói.
 * @param {import('discord.js').Interaction} [interaction=null] - ƒê·ªëi t∆∞·ª£ng interaction (n·∫øu c√≥).
 * @param {import('discord.js').Client} client - ƒê·ªëi t∆∞·ª£ng client Discord.
 */
module.exports = async (error, interaction = null, client) => {
    const errorId = Date.now();
    client.logger.error(`[ERROR ${errorId}] ƒê√£ x·∫£y ra l·ªói: ${error.message}\nStack: ${error.stack}`, error);

    const errorEmbed = new EmbedBuilder()
        .setColor('Red')
        .setTitle('‚ùå ƒê√£ x·∫£y ra l·ªói!')
        .setDescription(`Vui l√≤ng th·ª≠ l·∫°i sau. N·∫øu l·ªói ti·∫øp t·ª•c, h√£y b√°o c√°o cho ng∆∞·ªùi qu·∫£n l√Ω bot.\n\`\`\`ID l·ªói: ${errorId}\`\`\``)
        .setTimestamp();

    if (error.message.includes('getaddrinfo ENOTFOUND') || error.message.includes('fetch failed')) {
        errorEmbed.addFields({
            name: '‚ö†Ô∏è L·ªói k·∫øt n·ªëi API',
            value: 'Bot kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß nh·∫°c (backend Python). Vui l√≤ng ki·ªÉm tra tr·∫°ng th√°i v√† c·∫•u h√¨nh c·ªßa service backend tr√™n Railway. N·∫øu b·∫°n l√† ng∆∞·ªùi d√πng cu·ªëi, h√£y b√°o c√°o cho qu·∫£n tr·ªã vi√™n bot.'
        });
    } else if (error.message.includes('Not in a voice channel')) {
         errorEmbed.setDescription('B·∫°n ph·∫£i ·ªü trong m·ªôt k√™nh tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
    } else if (error.message.includes('not in the same voice channel')) {
        errorEmbed.setDescription('B·∫°n ph·∫£i ·ªü trong c√πng k√™nh tho·∫°i v·ªõi bot!');
    } else if (error.message.includes('403 Forbidden') || error.message.includes('Missing Permissions')) {
        errorEmbed.addFields({
            name: 'üö® Thi·∫øu quy·ªÅn',
            value: 'Bot thi·∫øu quy·ªÅn c·∫ßn thi·∫øt ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y. Vui l√≤ng c·∫•p c√°c quy·ªÅn `Connect`, `Speak`, `Send Messages`, `Read Message History`.'
        });
    }


    if (interaction && !interaction.replied && !interaction.deferred) {
        try {
            await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        } catch (e) {
            client.logger.error(`L·ªói khi g·ª≠i ph·∫£n h·ªìi l·ªói cho interaction: ${e.message}`, e);
        }
    } else if (interaction && (interaction.replied || interaction.deferred)) {
        try {
            await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
        } catch (e) {
            client.logger.error(`L·ªói khi g·ª≠i ph·∫£n h·ªìi l·ªói (followUp) cho interaction: ${e.message}`, e);
        }
    } else {
        client.logger.error(`L·ªói kh√¥ng th·ªÉ x·ª≠ l√Ω qua interaction: ${error.message}`);
    }
};
