// src/utils/errorHandler.js
const { EmbedBuilder } = require('discord.js');

/**
 * X·ª≠ l√Ω l·ªói t·∫≠p trung.
 * @param {Error} error - ƒê·ªëi t∆∞·ª£ng l·ªói.
 * @param {import('discord.js').Interaction} [interaction=null] - ƒê·ªëi t∆∞·ª£ng interaction (n·∫øu c√≥).
 * @param {import('discord.js').Client} client - ƒê·ªëi t∆∞·ª£ng client Discord.
 * @param {boolean} isFatal - ƒê√°nh d·∫•u l·ªói c√≥ ph·∫£i l√† l·ªói nghi√™m tr·ªçng (uncaughtException/unhandledRejection) kh√¥ng.
 */
module.exports = async (error, interaction = null, client, isFatal = false) => {
    const errorId = Date.now();
    const logPrefix = `[ERROR ${errorId}]`;

    // Ghi log chi ti·∫øt
    client.logger.error(`${logPrefix} ƒê√£ x·∫£y ra l·ªói: ${error.message}`);
    client.logger.error(`Stack Trace: ${error.stack}`);
    if (interaction) {
        client.logger.error(`Interaction Info: Command=<span class="math-inline">\{interaction\.commandName\}, User\=</span>{interaction.user.tag}, Guild=${interaction.guild?.name || 'DM'}`);
    }

    const errorEmbed = new EmbedBuilder()
        .setColor('Red')
        .setTitle('‚ùå ƒê√£ x·∫£y ra l·ªói!')
        .setDescription(`ƒê√£ c√≥ l·ªói n·ªôi b·ªô. Vui l√≤ng th·ª≠ l·∫°i sau. N·∫øu l·ªói ti·∫øp t·ª•c, h√£y b√°o c√°o cho ng∆∞·ªùi qu·∫£n l√Ω bot.\n\`\`\`ID l·ªói: ${errorId}\`\`\``)
        .setTimestamp();

    // Th√™m th√¥ng tin c·ª• th·ªÉ cho ng∆∞·ªùi d√πng cu·ªëi
    if (error.name === 'AbortError' && error.message.includes('The user aborted a request.')) {
        errorEmbed.addFields({
            name: '‚è≥ H·∫øt th·ªùi gian ch·ªù',
            value: 'M√°y ch·ªß nh·∫°c m·∫•t qu√° nhi·ªÅu th·ªùi gian ƒë·ªÉ ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi.'
        });
    } else if (error.message.includes('getaddrinfo ENOTFOUND') || error.message.includes('fetch failed')) {
        errorEmbed.addFields({
            name: '‚ö†Ô∏è L·ªói k·∫øt n·ªëi API',
            value: 'Bot kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß nh·∫°c (backend Python). Vui l√≤ng ki·ªÉm tra tr·∫°ng th√°i v√† c·∫•u h√¨nh c·ªßa service backend tr√™n Railway. N·∫øu b·∫°n l√† ng∆∞·ªùi d√πng cu·ªëi, h√£y b√°o c√°o cho qu·∫£n tr·ªã vi√™n bot.'
        });
    } else if (error.message.includes('Not in a voice channel')) {
        errorEmbed.setDescription('B·∫°n ph·∫£i ·ªü trong m·ªôt k√™nh tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
    } else if (error.message.includes('not in the same voice channel')) {
        errorEmbed.setDescription('B·∫°n ph·∫£i ·ªü trong c√πng k√™nh tho·∫°i v·ªõi bot!');
    } else if (error.message.includes('403 Forbidden') || error.message.includes('Missing Permissions')) {
        errorEmbed.addFields({
            name: 'üö® Thi·∫øu quy·ªÅn',
            value: 'Bot thi·∫øu quy·ªÅn c·∫ßn thi·∫øt ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y. Vui l√≤ng c·∫•p c√°c quy·ªÅn `Connect`, `Speak`, `Send Messages`, `Read Message History`.'
        });
    }

    // G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng qua interaction
    if (interaction) {
        if (!interaction.replied && !interaction.deferred) {
            try {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            } catch (e) {
                client.logger.error(`${logPrefix} L·ªói khi g·ª≠i ph·∫£n h·ªìi l·ªói cho interaction: ${e.message}`, e);
            }
        } else {
            try {
                await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
            } catch (e) {
                client.logger.error(`${logPrefix} L·ªói khi g·ª≠i ph·∫£n h·ªìi l·ªói (followUp) cho interaction: ${e.message}`, e);
            }
        }
    }

    // G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh log admin (cho c·∫£ l·ªói fatal v√† non-fatal)
    const ADMIN_LOG_CHANNEL_ID = process.env.ADMIN_LOG_CHANNEL_ID;
    if (ADMIN_LOG_CHANNEL_ID) {
        const adminChannel = await client.channels.fetch(ADMIN_LOG_CHANNEL_ID).catch(() => null);
        if (adminChannel && adminChannel.isTextBased()) {
            const adminEmbed = new EmbedBuilder()
                .setColor(isFatal ? 'DarkRed' : 'Orange') // M√†u kh√°c nhau cho l·ªói fatal
                .setTitle(isFatal ? `üö® BOT CRASH (FATAL): ${error.message.substring(0, 100)}` : `‚ö†Ô∏è L·ªói: ${error.message.substring(0, 100)}`)
                .setDescription(`\`\`\`ID l·ªói: ${errorId}\n${error.stack ? error.stack.substring(0, 1500) + '...' : 'Kh√¥ng c√≥ stack trace'}\`\`\``)
                .setTimestamp();
            if (interaction) {
                adminEmbed.addFields(
                    { name: 'Ng∆∞·ªùi d√πng', value: interaction.user.tag, inline: true },
                    { name: 'L·ªánh', value: interaction.commandName || 'Kh√¥ng r√µ', inline: true },
                    { name: 'Guild', value: interaction.guild?.name || 'DM', inline: true }
                );
            }
            adminChannel.send({ embeds: [adminEmbed] }).catch(e => client.logger.error(`${logPrefix} L·ªói g·ª≠i log l·ªói cho admin: ${e.message}`));
        }
    }

    // X·ª≠ l√Ω ri√™ng cho l·ªói Fatal (n·∫øu bot c√≥ th·ªÉ t·ª± kh·ªüi ƒë·ªông l·∫°i qua Railway th√¨ kh√¥ng c·∫ßn process.exit(1))
    if (isFatal) {
        client.logger.critical(`${logPrefix} Ph√°t hi·ªán l·ªói Fatal. ƒêang t·∫Øt process.`);
        // Trong m√¥i tr∆∞·ªùng nh∆∞ Railway, Docker, Kubernetes,
        // process.exit(1) s·∫Ω khi·∫øn container/pod b·ªã d·ª´ng v√† sau ƒë√≥ t·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i.
        // ƒêi·ªÅu n√†y l√† h√†nh vi mong mu·ªën cho vi·ªác "t·ª± ph·ª•c h·ªìi".
        // N·∫øu b·∫°n kh√¥ng mu·ªën bot t·ª± kh·ªüi ƒë·ªông l·∫°i, h√£y b·ªè d√≤ng n√†y.
        process.exit(1);
    }
};
