// events/client/interactionCreate.js
export default {
    name: 'interactionCreate',
    async execute(client, interaction) {
        // X·ª≠ l√Ω Slash Commands
        if (interaction.isChatInputCommand()) {
            const command = client.commands.get(interaction.commandName);

            if (!command) return;

            try {
                await command.execute(interaction, client); // Truy·ªÅn client v√†o ƒë·ªÉ c√°c l·ªánh c√≥ th·ªÉ truy c·∫≠p distube
            } catch (error) {
                console.error(error);
                if (interaction.replied || interaction.deferred) {
                    await interaction.followUp({ content: 'ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh n√†y!', ephemeral: true });
                } else {
                    await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh n√†y!', ephemeral: true });
                }
            }
        }

        // X·ª≠ l√Ω Button Interactions
        if (interaction.isButton()) {
            const { customId, guild, member, channel } = interaction;
            const queue = client.distube.getQueue(guild);

            if (!queue) {
                return interaction.reply({ content: 'Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!', ephemeral: true });
            }

            if (!member.voice.channel || member.voice.channel.id !== queue.voiceChannel.id) {
                return interaction.reply({ content: 'B·∫°n ph·∫£i ·ªü trong k√™nh tho·∫°i c·ªßa bot ƒë·ªÉ ƒëi·ªÅu khi·ªÉn nh·∫°c!', ephemeral: true });
            }

            try {
                switch (customId) {
                    case 'distube-pause-resume':
                        if (queue.paused) {
                            queue.resume();
                            await interaction.reply({ content: '‚ñ∂Ô∏è ƒê√£ ti·∫øp t·ª•c ph√°t nh·∫°c.', ephemeral: true });
                        } else {
                            queue.pause();
                            await interaction.reply({ content: '‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng nh·∫°c.', ephemeral: true });
                        }
                        break;
                    case 'distube-skip':
                        if (queue.songs.length > 1) {
                            await queue.skip();
                            await interaction.reply({ content: '‚è≠Ô∏è ƒê√£ b·ªè qua b√†i h√°t.', ephemeral: true });
                        } else {
                            await interaction.reply({ content: 'Kh√¥ng c√≤n b√†i h√°t n√†o trong h√†ng ch·ªù ƒë·ªÉ b·ªè qua.', ephemeral: true });
                        }
                        break;
                    case 'distube-stop':
                        queue.stop();
                        await interaction.reply({ content: '‚èπÔ∏è ƒê√£ d·ª´ng ph√°t nh·∫°c v√† r·ªùi k√™nh.', ephemeral: true });
                        break;
                    case 'distube-loop':
                        const mode = queue.toggleRepeat(); // 0 = off, 1 = repeat song, 2 = repeat queue
                        let loopModeText;
                        if (mode === 0) loopModeText = 'T·∫Øt l·∫∑p';
                        else if (mode === 1) loopModeText = 'L·∫∑p b√†i h√°t hi·ªán t·∫°i';
                        else loopModeText = 'L·∫∑p h√†ng ch·ªù';
                        await interaction.reply({ content: `üîÅ ƒê√£ c√†i ƒë·∫∑t ch·∫ø ƒë·ªô l·∫∑p: \`${loopModeText}\`.`, ephemeral: true });
                        break;
                    case 'distube-queue':
                        // Hi·ªÉn th·ªã h√†ng ch·ªù
                        const q = queue.songs.map((song, i) =>
                            `${i === 0 ? 'ƒêang ph√°t:' : `${i}.`} ${song.name} - \`${song.formattedDuration}\``
                        ).join('\n');
                        await interaction.reply({ content: `**H√†ng ch·ªù hi·ªán t·∫°i:**\n${q.slice(0, 1900)}`, ephemeral: true });
                        break;
                    default:
                        // Handle other custom IDs if any
                        break;
                }
            } catch (error) {
                console.error(`Error handling music button: ${error}`);
                await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.', ephemeral: true });
            }
        }

        // X·ª≠ l√Ω c√°c lo·∫°i t∆∞∆°ng t√°c kh√°c (Select Menus, Modals) s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y sau
    },
};
