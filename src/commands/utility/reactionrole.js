// commands/utility/reactionrole.js
import { SlashCommandBuilder, PermissionsBitField, ChannelType } from 'discord.js';

export default {
    data: new SlashCommandBuilder()
        .setName('reactionrole')
        .setDescription('Thi·∫øt l·∫≠p m·ªôt tin nh·∫Øn reaction role.')
        .addChannelOption(option =>
            option.setName('channel')
                .setDescription('K√™nh ƒë·ªÉ g·ª≠i tin nh·∫Øn reaction role.')
                .setRequired(true)
                .addChannelTypes(ChannelType.GuildText))
        .addStringOption(option =>
            option.setName('message_id')
                .setDescription('ID c·ªßa tin nh·∫Øn reaction role ƒë√£ c√≥ (ƒë·ªÉ ch·ªânh s·ª≠a).')
                .setRequired(false))
        .addStringOption(option =>
            option.setName('description')
                .setDescription('N·ªôi dung m√¥ t·∫£ cho tin nh·∫Øn reaction role.')
                .setRequired(false))
        .addStringOption(option => // Example: "‚úÖ:@role1 ‚ùå:@role2"
            option.setName('roles')
                .setDescription('C√°c c·∫∑p emoji v√† role (v√≠ d·ª•: "‚úÖ:@Member üçé:@AppleUser").')
                .setRequired(true)),
    async execute(interaction, client) {
        // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng (ch·ªâ Admin)
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
            return interaction.reply({ content: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!', ephemeral: true });
        }

        await interaction.deferReply({ ephemeral: true });

        const targetChannel = interaction.options.getChannel('channel');
        const messageId = interaction.options.getString('message_id');
        const description = interaction.options.getString('description') || 'H√£y reaction ƒë·ªÉ nh·∫≠n vai tr√≤!';
        const rolesInput = interaction.options.getString('roles');

        // Parse rolesInput: "‚úÖ:@Member üçé:@AppleUser" -> { "‚úÖ": "roleId1", "üçé": "roleId2" }
        const roleMap = new Map();
        const emojiRoles = rolesInput.split(' ').map(pair => pair.split(':')); // [['‚úÖ', '@Member'], ['üçé', '@AppleUser']]

        for (const [emoji, roleMention] of emojiRoles) {
            const roleMatch = roleMention.match(/<@&(\d+)>/); // Extract role ID from mention
            if (roleMatch) {
                const roleId = roleMatch[1];
                const role = interaction.guild.roles.cache.get(roleId);
                if (role) {
                    roleMap.set(emoji, role.id);
                } else {
                    return interaction.editReply(`Kh√¥ng t√¨m th·∫•y vai tr√≤: ${roleMention}. Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒë√£ ƒë·ªÅ c·∫≠p vai tr√≤ ƒë√∫ng c√°ch.`);
                }
            } else {
                 return interaction.editReply(`ƒê·ªãnh d·∫°ng vai tr√≤ kh√¥ng h·ª£p l·ªá: ${roleMention}. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng \`emoji:@RoleName\`.`);
            }
        }

        // T·∫°o n·ªôi dung embed v√† emojis ƒë·ªÉ reaction
        let embedFields = [];
        let reactionEmojis = [];
        for (const [emoji, roleId] of roleMap.entries()) {
            const role = interaction.guild.roles.cache.get(roleId);
            if (role) {
                embedFields.push({ name: emoji, value: `${role.name}`, inline: true });
                reactionEmojis.push(emoji);
            }
        }

        const embed = {
            title: 'Ch·ªçn vai tr√≤ c·ªßa b·∫°n!',
            description: description,
            fields: embedFields,
            color: client.config.embedColor,
            footer: { text: 'Reaction v√†o emoji ƒë·ªÉ nh·∫≠n vai tr√≤!' },
            timestamp: new Date(),
        };

        let msg;
        try {
            if (messageId) {
                // Ch·ªânh s·ª≠a tin nh·∫Øn ƒë√£ c√≥
                msg = await targetChannel.messages.fetch(messageId);
                await msg.edit({ embeds: [embed] });
                // G·ª° b·ªè t·∫•t c·∫£ reactions c≈© v√† th√™m reactions m·ªõi
                await msg.reactions.removeAll();
                for (const emoji of reactionEmojis) {
                    await msg.react(emoji);
                }
                await interaction.editReply(`ƒê√£ c·∫≠p nh·∫≠t tin nh·∫Øn reaction role t·∫°i: ${msg.url}`);
            } else {
                // G·ª≠i tin nh·∫Øn m·ªõi
                msg = await targetChannel.send({ embeds: [embed] });
                for (const emoji of reactionEmojis) {
                    await msg.react(emoji);
                }
                await interaction.editReply(`ƒê√£ g·ª≠i tin nh·∫Øn reaction role m·ªõi t·∫°i: ${msg.url}`);
            }

            // L∆∞u th√¥ng tin reaction role v√†o client ho·∫∑c database (Quan tr·ªçng!)
            // ƒê·ªÉ ƒë∆°n gi·∫£n, ch√∫ng ta s·∫Ω l∆∞u t·∫°m v√†o client. ƒê·ªÉ b·ªÅn v·ªØng h∆°n, b·∫°n n√™n d√πng DB.
            if (!client.reactionRoles) {
                client.reactionRoles = new Map();
            }
            client.reactionRoles.set(msg.id, roleMap); // L∆∞u Map<Emoji, RoleID>
            console.log(`[ReactionRole] Stored reaction role for message ID: ${msg.id}`);

        } catch (error) {
            console.error('Error setting up reaction role:', error);
            await interaction.editReply('ƒê√£ x·∫£y ra l·ªói khi thi·∫øt l·∫≠p tin nh·∫Øn reaction role. Vui l√≤ng ki·ªÉm tra quy·ªÅn v√† th√¥ng tin b·∫°n cung c·∫•p.');
        }
    },
};
