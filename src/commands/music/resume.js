// src/commands/music/resume.js
const { SlashCommandBuilder } = require('discord.js');
const { AudioPlayerStatus } = require('@discordjs/voice');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('resume')
        .setDescription('Ti·∫øp t·ª•c b√†i h√°t ƒë√£ t·∫°m d·ª´ng.'),

    async execute(interaction, client) {
        const guildId = interaction.guild.id;
        const player = client.voicePlayers.get(guildId);
        const logPrefix = `[ResumeCommand][${guildId}]`;

        await interaction.deferReply({ ephemeral: true });

        if (!player) {
            client.logger.info(`${logPrefix} Kh√¥ng c√≥ AudioPlayer cho guild n√†y.`);
            return interaction.followUp({ content: 'Bot hi·ªán kh√¥ng ph√°t nh·∫°c.', ephemeral: true });
        }

        if (player.state.status === AudioPlayerStatus.Paused) {
            player.unpause();
            client.logger.info(`${logPrefix} ƒê√£ ti·∫øp t·ª•c ph√°t nh·∫°c.`);
            await interaction.followUp({ content: '‚ñ∂Ô∏è ƒê√£ ti·∫øp t·ª•c nh·∫°c.', ephemeral: false });
        } else if (player.state.status === AudioPlayerStatus.Playing) {
            client.logger.info(`${logPrefix} Nh·∫°c ƒë√£ ƒëang ph√°t.`);
            await interaction.followUp({ content: '‚ñ∂Ô∏è Nh·∫°c ƒë√£ ƒëang ph√°t r·ªìi.', ephemeral: true });
        } else {
            client.logger.info(`${logPrefix} Player kh√¥ng ·ªü tr·∫°ng th√°i Paused/Playing.`);
            await interaction.followUp({ content: 'ü§∑‚Äç‚ôÄÔ∏è Bot hi·ªán kh√¥ng c√≥ nh·∫°c ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c ƒëang ·ªü tr·∫°ng th√°i kh√¥ng th·ªÉ ti·∫øp t·ª•c.', ephemeral: true });
        }
    },
};
