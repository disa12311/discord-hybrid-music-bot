// src/commands/music/volume.js
const { SlashCommandBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('volume')
        .setDescription('ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng c·ªßa bot.')
        .addIntegerOption(option =>
            option.setName('value')
                .setDescription('M·ª©c √¢m l∆∞·ª£ng (0-200, m·∫∑c ƒë·ªãnh 100)')
                .setRequired(false)
                .setMinValue(0)
                .setMaxValue(200)),

    async execute(interaction, client) {
        const guildId = interaction.guild.id;
        const player = client.voicePlayers.get(guildId);
        const logPrefix = `[VolumeCommand][${guildId}]`;

        await interaction.deferReply();

        if (!player || !player.state.resource) {
            client.logger.info(`${logPrefix} Bot hi·ªán kh√¥ng ph√°t nh·∫°c.`);
            return interaction.followUp({ content: 'Bot hi·ªán kh√¥ng ph√°t nh·∫°c.', ephemeral: true });
        }

        const newVolume = interaction.options.getInteger('value');
        const volume = player.state.resource.volume;

        if (!volume) {
            client.logger.warn(`${logPrefix} Kh√¥ng th·ªÉ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng v√¨ AudioResource kh√¥ng c√≥ inlineVolume.`);
            return interaction.followUp({ content: 'Hi·ªán kh√¥ng th·ªÉ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng.', ephemeral: true });
        }

        try {
            if (newVolume !== null) {
                const volumeFactor = newVolume / 100;
                volume.setVolume(volumeFactor);
                client.logger.info(`${logPrefix} ƒê√£ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng ƒë·∫øn ${newVolume}%.`);
                await interaction.followUp(`üîä ƒê√£ ƒë·∫∑t √¢m l∆∞·ª£ng th√†nh **${newVolume}%**.`);
            } else {
                const currentVolume = Math.round(volume.volume * 100);
                client.logger.info(`${logPrefix} √Çm l∆∞·ª£ng hi·ªán t·∫°i: ${currentVolume}%.`);
                await interaction.followUp(`üîä √Çm l∆∞·ª£ng hi·ªán t·∫°i l√† **${currentVolume}%**.`);
            }
        } catch (error) {
            client.handleError(error, interaction, client);
        }
    },
};
