// src/commands/info/
const { SlashCommandBuilder, EmbedBuilder, version } = require('discord.js');
const ms = require('ms');
const os = require('os'); // ƒê·ªÉ l·∫•y th√¥ng tin h·ªá ƒëi·ªÅu h√†nh

module.exports = {
    data: new SlashCommandBuilder()
        .setName('status')
        .setDescription('Hi·ªÉn th·ªã tr·∫°ng th√°i v√† ƒë·ªô tr·ªÖ c·ªßa bot.'),

    async execute(interaction, client) {
        await interaction.deferReply();

        const wsLatency = client.ws.ping; // ƒê·ªô tr·ªÖ WebSocket API c·ªßa Discord
        const uptimeBot = client.uptime; // Th·ªùi gian bot ƒë√£ online t·ª´ khi ƒëƒÉng nh·∫≠p (milliseconds)
        const uptimeProcess = process.uptime() * 1000; // Th·ªùi gian ti·∫øn tr√¨nh Node.js ƒë√£ ch·∫°y (milliseconds)

        // T√≠nh to√°n t·ªïng s·ªë b√†i h√°t trong h√†ng ƒë·ª£i to√†n b·ªô guild
        let totalSongsInQueue = 0;
        client.musicQueues.forEach(queue => {
            if (queue.length > 0) {
                totalSongsInQueue += queue.length;
            }
        });

        // L·∫•y th√¥ng tin v·ªÅ Node.js v√† h·ªá ƒëi·ªÅu h√†nh
        const nodeVersion = process.version;
        const discordJsVersion = version;
        const platform = os.platform();
        const arch = os.arch();
        const totalMemoryMB = (os.totalmem() / 1024 / 1024).toFixed(2);
        const freeMemoryMB = (os.freemem() / 1024 / 1024).toFixed(2);
        const usedMemoryMB = (totalMemoryMB - freeMemoryMB).toFixed(2);
        const cpuCores = os.cpus().length;

        const embed = new EmbedBuilder()
            .setColor('Blue')
            .setTitle('ü§ñ Tr·∫°ng th√°i Bot')
            .addFields(
                { name: 'ƒê·ªô tr·ªÖ API (Discord)', value: `\`${wsLatency}ms\``, inline: true },
                { name: 'Th·ªùi gian ho·∫°t ƒë·ªông Bot', value: `\`${ms(uptimeBot, { long: true })}\``, inline: true },
                { name: 'Th·ªùi gian ho·∫°t ƒë·ªông Process', value: `\`${ms(uptimeProcess, { long: true })}\``, inline: true },
                { name: 'K√™nh tho·∫°i ƒëang k·∫øt n·ªëi', value: `\`${client.voiceConnections.size}\``, inline: true },
                { name: 'S·ªë l∆∞·ª£ng Guilds', value: `\`${client.guilds.cache.size}\``, inline: true },
                { name: 'T·ªïng s·ªë b√†i h√°t trong h√†ng ƒë·ª£i', value: `\`${totalSongsInQueue}\``, inline: true },
                { name: 'S·ª≠ d·ª•ng RAM (Bot Process)', value: `\`${(process.memoryUsage().rss / 1024 / 1024).toFixed(2)} MB\``, inline: true }, // RAM ri√™ng c·ªßa process bot
                { name: 'Phi√™n b·∫£n Node.js', value: `\`${nodeVersion}\``, inline: true },
                { name: 'Phi√™n b·∫£n discord.js', value: `\`v${discordJsVersion}\``, inline: true },
                { name: 'H·ªá ƒëi·ªÅu h√†nh', value: `\`${platform} (${arch})\``, inline: true },
                // C√≥ th·ªÉ th√™m th√¥ng tin CPU v√† t·ªïng RAM n·∫øu b·∫°n mu·ªën, nh∆∞ng n√≥ s·∫Ω l√† RAM c·ªßa m√°y ch·ªß, kh√¥ng ph·∫£i ri√™ng c·ªßa bot
                // { name: 'CPU Cores', value: `\`${cpuCores}\``, inline: true },
                // { name: 'T·ªïng RAM m√°y ch·ªß', value: `\`${totalMemoryMB} MB\``, inline: true }
            )
            .setTimestamp()
            .setFooter({ text: `C·∫≠p nh·∫≠t l·∫ßn cu·ªëi` });

        await interaction.followUp({ embeds: [embed] });
    },
};
